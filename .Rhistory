)
demographics <- c("ST04Q01", "ESCS", "ausSTATE", "ausGEOLOC_3", "ausINDIG")
int_motivation <- c("ST29Q01", "ST29Q03", "ST29Q04", "ST29Q06") # intrinsic motivation INTMAT
ext_motivation <- c("ST29Q02", "ST29Q05", "ST29Q07", "ST29Q08") # extrinsic motivation INSTMOT
self_concept <- c("ST42Q02", "ST42Q04", "ST42Q06", "ST42Q07", "ST42Q09") # SCMAT
self_efficacy <- c("ST37Q01", "ST37Q02", "ST37Q03", "ST37Q04", "ST37Q05", "ST37Q06", "ST37Q07", "ST37Q08") # MATHEFF
control_in_school <- c("ST91Q01", "ST91Q02", "ST91Q03", "ST91Q04", "ST91Q05", "ST91Q06")
control_in_maths <- c("ST43Q01", "ST43Q02", "ST43Q03", "ST43Q04", "ST43Q05", "ST43Q06")
attr_failure <- c("ST44Q01", "ST44Q03", "ST44Q04", "ST44Q05", "ST44Q07", "ST44Q08") # FAILMAT
maths_anxiety <- c("ST42Q01", "ST42Q03", "ST42Q05", "ST42Q08", "ST42Q10") # ANXMAT
subj_norms <- c("ST35Q01", "ST35Q02", "ST35Q03", "ST35Q04", "ST35Q05", "ST35Q06") # SUBNORM
maths_literacy <- paste0("PV", 1:5, "MATH")
stu <- fread("Data/Raw/AUS_INT_STU12_DEC03.csv",
select = c(identifiers, demographics, int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms, maths_literacy)
)
stu
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
install.packages("plyr")
install.packages("ggplot2")
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
library(data.table)
library(plyr)
identifiers <- c("STRATUM", "SCHOOLID", "StIDStd",
"ST03Q01", "ST03Q02" # birth month, birth year
)
demographics <- c("ST04Q01", "ESCS", "ausSTATE", "ausGEOLOC_3", "ausINDIG")
int_motivation <- c("ST29Q01", "ST29Q03", "ST29Q04", "ST29Q06") # intrinsic motivation INTMAT
ext_motivation <- c("ST29Q02", "ST29Q05", "ST29Q07", "ST29Q08") # extrinsic motivation INSTMOT
self_concept <- c("ST42Q02", "ST42Q04", "ST42Q06", "ST42Q07", "ST42Q09") # SCMAT
self_efficacy <- c("ST37Q01", "ST37Q02", "ST37Q03", "ST37Q04", "ST37Q05", "ST37Q06", "ST37Q07", "ST37Q08") # MATHEFF
control_in_school <- c("ST91Q01", "ST91Q02", "ST91Q03", "ST91Q04", "ST91Q05", "ST91Q06")
control_in_maths <- c("ST43Q01", "ST43Q02", "ST43Q03", "ST43Q04", "ST43Q05", "ST43Q06")
attr_failure <- c("ST44Q01", "ST44Q03", "ST44Q04", "ST44Q05", "ST44Q07", "ST44Q08") # FAILMAT
maths_anxiety <- c("ST42Q01", "ST42Q03", "ST42Q05", "ST42Q08", "ST42Q10") # ANXMAT
subj_norms <- c("ST35Q01", "ST35Q02", "ST35Q03", "ST35Q04", "ST35Q05", "ST35Q06") # SUBNORM
maths_literacy <- paste0("PV", 1:5, "MATH")
stu <- fread("Data/Raw/AUS_INT_STU12_DEC03.csv",
select = c(identifiers, demographics, int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms, maths_literacy)
)
pv_cutoffs <- c(358, 420, 482, 545, 607, 669, 1000) # from 2014024_tables.pdf
stu[, cut(PV1MATH, pv_cutoffs, labels = F, include.lowest = T)]
PVMATH_levels <- stu[, llply(list(PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH),
cut, breaks = pv_cutoffs, labels = F, include.lowest = T)]
PVMATH_levels[is.na(PVMATH.levels)] <- 0
setnames(PVMATH_levels, paste("PV", 1:5, "MATH", sep = ""))
pv_cutoffs <- c(358, 420, 482, 545, 607, 669, 1000) # from 2014024_tables.pdf
stu[, cut(PV1MATH, pv_cutoffs, labels = F, include.lowest = T)]
PVMATH_levels <- stu[, llply(list(PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH),
cut, breaks = pv_cutoffs, labels = F, include.lowest = T)]
PVMATH_levels[is.na(PVMATH_levels)] <- 0
setnames(PVMATH_levels, paste("PV", 1:5, "MATH", sep = ""))
PVMATH_levels
stu[, paste0("PV", 1:5, "MATH_LEVEL") :=
llply(list(PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH),
cut, breaks = pv_cutoffs, labels = F, include.lowest = T)]
stu
pv_cutoffs <- c(0, 358, 420, 482, 545, 607, 669, 1000) # from 2014024_tables.pdf
stu[, paste0("PV", 1:5, "MATH_LEVEL") :=
llply(list(PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH),
cut, breaks = pv_cutoffs, labels = F, include.lowest = T)]
stu
stu[is.na(ESCS), ESCS := mean(stu$ESCS, na.rm = T)] # assume missing values cluster around mean
stu$ESCS
stu[is.na(ESCS) | ESCS == 9999.0,
ESCS := mean(stu[ESCS != 9999.0], na.rm = T)] # assume missing values cluster around mean
stu[is.na(ESCS) | ESCS == 9999.0,
ESCS := mean(stu[ESCS != 9999.0, ESCS], na.rm = T)] # assume missing values cluster around mean
stu$ESCS
stu <- fread("Data/Raw/AUS_INT_STU12_DEC03.csv",
select = c(identifiers, demographics, int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms, maths_literacy)
)
stu$ESCS
stu[is.na(ESCS) | ESCS == 9999.0,
ESCS := mean(stu[ESCS != 9999.0, ESCS], na.rm = T)] # assume missing values cluster around mean
stu$ESCS
quantile(stu$ESCS)
escs_quantile
escs_quantile <- quantile(stu$ESCS)
escs_quantile
escs_quantile[1]
stu[is.na(ESCS) | ESCS == 9999.0,
ESCS := mean(stu[ESCS != 9999.0, ESCS], na.rm = T)] # assume missing values cluster around mean
escs_quantile <- quantile(stu$ESCS)
stu[, ESCS_Q := 0]
for(i in 1:4) {
stu[ESCS >= escs_quantile[i], ESCS_Q := i]
}
stu[, .(ESCS, ESCS_Q)]
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
stu <- fread("Data/Raw/PISA2012_StdQ_AUS.dat",
select = c(identifiers, demographics, int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms, maths_literacy)
)
stu
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions.R', echo=TRUE)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
stdq_dict <- fread("Data/Raw/StdQ_dictionary.dat")
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
library(data.table)
library(plyr)
#########################################
## Columns to import
#########################################
identifiers <- c("STRATUM", "SCHOOLID", "StIDStd",
"ST03Q01", "ST03Q02" # birth month, birth year
)
demographics <- c("ST04Q01", "ESCS", "ausSTATE", "ausGEOLOC_3", "ausINDIG")
int_motivation <- c("ST29Q01", "ST29Q03", "ST29Q04", "ST29Q06") # intrinsic motivation INTMAT
ext_motivation <- c("ST29Q02", "ST29Q05", "ST29Q07", "ST29Q08") # extrinsic motivation INSTMOT
self_concept <- c("ST42Q02", "ST42Q04", "ST42Q06", "ST42Q07", "ST42Q09") # SCMAT
self_efficacy <- c("ST37Q01", "ST37Q02", "ST37Q03", "ST37Q04", "ST37Q05", "ST37Q06", "ST37Q07", "ST37Q08") # MATHEFF
control_in_school <- c("ST91Q01", "ST91Q02", "ST91Q03", "ST91Q04", "ST91Q05", "ST91Q06")
control_in_maths <- c("ST43Q01", "ST43Q02", "ST43Q03", "ST43Q04", "ST43Q05", "ST43Q06")
attr_failure <- c("ST44Q01", "ST44Q03", "ST44Q04", "ST44Q05", "ST44Q07", "ST44Q08") # FAILMAT
maths_anxiety <- c("ST42Q01", "ST42Q03", "ST42Q05", "ST42Q08", "ST42Q10") # ANXMAT
subj_norms <- c("ST35Q01", "ST35Q02", "ST35Q03", "ST35Q04", "ST35Q05", "ST35Q06") # SUBNORM
maths_literacy <- paste0("PV", 1:5, "MATH")
#########################################
## Load data
#########################################
d <- fread("Data/Raw/PISA2012_StdQ_AUS.dat",
select = c(identifiers, demographics, int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms, maths_literacy)
)
#########################################
## Set missing values to NA
#########################################
stuq_dict <- fread("Data/Raw/StdQ_dictionary.dat")
stu <- missingPISA(d, stuq_dict)
missingPISA(d, stuq_dict)
stuq_dict
variables
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions.R', echo=TRUE)
stu <- missingPISA(d, stuq_dict)
stu
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
stu
stu
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
library(ggplot2)
stu[, qplot(ESCS, ESCS_Q)]
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
stu[, qplot(ESCS, ESCS_Q)]
setnames(stu, c("ST03Q01", "ST03Q02"), c("BIRTHMONTH", "BIRTHYEAR")
)
stu
d <- fread("Data/Raw/PISA2012_StdQ_AUS.dat",
select = c(identifiers, demographics, int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms, maths_literacy)
)
d
nrow(DT)
vector(10)
vector()
vector(length = 10)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions.R', echo=TRUE)
all_seated(stu[, c(int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms)], with = F)
all_seated(stu[, c(int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms), with = F])
d[, c(int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms), with = F]
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions.R', echo=TRUE)
all_seated(d[, c(int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms), with = F])
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions.R', echo=TRUE)
all_seated(d[, c(int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms), with = F])
all_seated_test <-
all_seated(d[, c(int_motivation, ext_motivation, self_concept,
self_efficacy, control_in_school, control_in_maths, attr_failure,
maths_anxiety, subj_norms), with = F])
d <- d[all_seated_test]
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
?opim
?optim
vector(list = 1)
vector(list)
vector()
val_set = sample(100)
val_seet
val_set
i = 1
val_set[1:length(val_set) % 5 == i]
1:length(val_set) % 5 == i
1:length(val_set) %% 5 == i
val_set[1:length(val_set) %% 5 == i]
i=2
val_set[1:length(val_set) %% 5 == i]
i=3
val_set[1:length(val_set) %% 5 == i]
install.packages(c("foreach", "doParallel"))
?optim
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions_col_filt.R', echo=TRUE)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions_col_filt.R', echo=TRUE)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/0_functions_col_filt.R', echo=TRUE)
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
choose_latent_features <- col_filt_cv5f(DF = stu[, dispositions, with = F],
max_latent_features = 7,
n_cores = 8)
gradient
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y[["train"]][[fold]],
MISSING = is.na(Y[["train"]][[fold]]),
nq = nq,
ns = ns,
nf = nf,
lambda = 1,
alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length(dispositions)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Y_5foldCV
J_counter <-
foreach(nf = 1:3, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind) %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.frame(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
library(stats)
install.packages("stats")
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, #alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
Y_5foldCV[[1]][[fold]]
head(Y_5foldCV[[1]][[fold]])
head(is.na(Y_5foldCV[[1]][[fold]]))
cost
results
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, #alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
View(col_filt_cv5f)
source('~/.active-rstudio-document', echo=TRUE)
J_counter
J_counter[, .(nf, Jtrain / (sum(!MISSING) * 0.8), Jtest / (sum(!MISSING) * 0.2))]
J_counter = as.data.table(J_counter)
J_counter[, .(nf, Jtrain / (sum(!MISSING) * 0.8), Jtest / (sum(!MISSING) * 0.2))]
J_summary <- J_counter[, .(nf, Jtrain / (sum(!MISSING) * 0.8), Jtest / (sum(!MISSING) * 0.2)), by = nf]
J_summary
J_counter[, .(nf, Jtrain / (sum(!MISSING) * 0.8), Jtest / (sum(!MISSING) * 0.2)), by = nf]
J_summary <- J_counter[, .(Jtrain / (sum(!MISSING) * 0.8), Jtest / (sum(!MISSING) * 0.2)), by = nf]
J_summary
J_counter[, .(mean(Jtrain / (sum(!MISSING) * 0.8)), mean(Jtest / (sum(!MISSING) * 0.2))), by = nf]
registerDoParallel()
J_counter <-
foreach(nf = 1:3, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind) %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.frame(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
J_counter <-
foreach(nf = 1:3, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind) %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1#, alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.frame(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
J_counter <-
foreach(nf = 1:3, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind) %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, #alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.frame(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
J_counter[, .(mean(Jtrain / (sum(!MISSING) * 0.8)), mean(Jtest / (sum(!MISSING) * 0.2))), by = nf]
J_counter
registerDoParallel()
J_counter <-
foreach(nf = 1:3, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind) %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, #alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.table(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
registerDoParallel()
J_counter <-
foreach(nf = 1:3, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind, .multicombine = T, .packages = "data.table") %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, #alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.table(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
J_counter[, .(mean(Jtrain / (sum(!MISSING) * 0.8)), mean(Jtest / (sum(!MISSING) * 0.2))), by = nf]
J_counter <-
foreach(nf = 1:7, .combine = rbind) %:%
foreach(fold = 1:5, .combine = rbind, .multicombine = T, .packages = "data.table") %dopar%{
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y_5foldCV[[1]][[fold]],
MISSING = is.na(Y_5foldCV[[1]][[fold]]),
nq = nq, ns = ns, nf = nf, lambda = 1, #alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000))
test_error <- cost(results$par, Y_5foldCV[[2]][[fold]], MISSING = is.na(Y_5foldCV[[2]][[fold]]),
nq, ns, nf, lambda)
output <- data.table(nf = nf, fold = fold, Jtrain = results$value, Jtest = test_error)
}
registerDoSEQ()
J_counter[, .(mean(Jtrain / (sum(!MISSING) * 0.8)), mean(Jtest / (sum(!MISSING) * 0.2))), by = nf]
J_summary <-
J_counter[, .(
mean(Jtrain / (sum(!MISSING) * 0.8)),
mean(Jtest / (sum(!MISSING) * 0.2))
), by = nf]
ggplot(J_summary, aes(nf)) + geom_line(aes(y = V1), colour = "red") + geom_line(aes(y = V2), colour = "blue")
source("Scripts/1_ETL_col_filt_tune.R")
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL_col_filt_tune.R', echo=TRUE)
J_summary
ggplot(J_summary, aes(nf)) + geom_line(aes(y = V1), colour = "red") + geom_line(aes(y = V2), colour = "blue")
ggplot(J_summary, aes(nf)) + geom_line(aes(y = V1), colour = "red") + geom_line(aes(y = V2), colour = "blue")
ggplot(J_summary, aes(nf)) + geom_line(aes(y = V1), colour = "red")
dev.off()
ggplot(J_summary, aes(nf)) + geom_line(aes(y = V1), colour = "red") + geom_line(aes(y = V2), colour = "blue")
ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue") +
geom_errorbar(aes(ymin = V1 - V2/2, ymax = V1 + v2/2)) +
geom_errorbar(aes(ymin = V3 - V4/2, ymax = V3 + v4/2))
J_summary
ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue")
ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue") +
geom_errorbar(aes(ymin = V1 - V2/2, ymax = V1 + v2/2))
ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue") +
geom_errorbar(aes(ymin = V1 - V2 /2, ymax = V1 + v2 /2)) +
geom_errorbar(aes(ymin = V3 - V4 /2, ymax = V3 + v4 /2))
ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue") +
geom_errorbar(aes(ymin = V1 - V2 /2, ymax = V1 + V2 /2)) +
geom_errorbar(aes(ymin = V3 - V4 /2, ymax = V3 + v4 /2))
ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue") +
geom_errorbar(aes(ymin = V1 - V2 /2, ymax = V1 + V2 /2)) +
geom_errorbar(aes(ymin = V3 - V4 /2, ymax = V3 + V4 /2))
nf <- 6
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y, MISSING = MISSING, nq = nq, ns = ns, nf = 4, lambda = 1, alpha = 0.001,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000)
)
output <- vec2matrix(results$par, Y, MISSING, nq, ns, nf = 4)
X <- output[[1]]
THETA <- output[[2]]
GUESS <- round(THETA %*% t(X))
Y[MISSING] <- GUESS[MISSING]
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y, MISSING = MISSING, nq = nq, ns = ns, nf = 4, lambda = 1,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000)
)
dim(Y)
dim(MISSING)
nq
ns
nf
nf <- 6
results <- optim(par = runif(nq*nf + ns*nf, -1, 1),
fn = cost,
gr = gradient,
Y = Y,
MISSING = MISSING,
nq = nq,
ns = ns,
nf = nf,
lambda = 1,
method = "L-BFGS-B",
control = list(trace = 1,
maxit = 1000)
)
output <- vec2matrix(results$par, Y, MISSING, nq, ns, nf = 4)
results$par
dim(results$par)
length(results$par)
output <- vec2matrix(results$par, Y, MISSING, nq, ns, nf)
X <- output[[1]]
THETA <- output[[2]]
GUESS <- round(THETA %*% t(X))
Y[MISSING] <- GUESS[MISSING]
Y = Y + 2.5
head(Y)
dim(Y)
stu[, c(identifiers, demographics, maths_literacy), with = F]
stu
stu[, names(stu) %in% dispositions, with = F]
stu[, !names(stu) %in% dispositions, with = F]
cbind(stu[, !names(stu) %in% dispositions, with = F], Y)
imputed_table <- cbind(stu[, !names(stu) %in% dispositions, with = F], Y)
write.table(imputed_table, "Data/Clean/imputed_aus_data.csv", col.names = T, rrow.names = F, sep = ",")
write.table(imputed_table, "Data/Clean/imputed_aus_data.csv", col.names = T, row.names = F, sep = ",")
source('C:/Users/Jason/Projects/pisa-dispositions/Scripts/1_ETL.R', echo=TRUE)
pdf(file = "Outputs/Plots/tune_nf_to_impute_missing_values.pdf", width = 8, height = 8)
print(p1)
dev.off()
p1 <-  ggplot(J_summary, aes(nf)) +
geom_line(aes(y = V1), colour = "red") +
geom_line(aes(y = V3), colour = "blue") +
geom_errorbar(aes(ymin = V1 - V2 /2, ymax = V1 + V2 /2)) +
geom_errorbar(aes(ymin = V3 - V4 /2, ymax = V3 + V4 /2))
pdf(file = "Outputs/Plots/tune_nf_to_impute_missing_values.pdf", width = 8, height = 8)
print(p1)
dev.off()
sqrt(.22)
